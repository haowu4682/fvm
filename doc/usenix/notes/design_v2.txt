
 MW: high-level: this document is very clear. very nice work!!!!

   I think that if we come up with a few scenarios where we need both
   VC and sharing then we will be in good shape. Perhaps add a section
   called "Motivating scenarios", and outline them all? Then later in
   the paper you can show how the mechanisms that you provide can
   support the scenarios?

   If the mechanisms that you have support several possible scenarios,
       then I think this thing would make a nice submission to Usenix
       ATC...

     MW: maybe do s/commit/commit/g. I think that in git, the object is
     called a "commit", not a "commit". (But in general, "commit" is a
             verb, and "commit" is a noun, so I would have guessed that
            your
             usage is the correct one. Still, I hear people use the term "git
             commit"....)

1. Motivation

Users need some functionalities which are not included in a normal file systems
(e.g. ext4).

(1) Version control mechanisms, which include:

    * Rollback to previous point

    * Make a branch & Merge from another branch

(2) Sharing between users, which include:

    * A user could view and modify a subset of another user's files

    * A user could specify which files could be accessed by another user

    * A user could know who makes a specified modification.

    * A user could specify the timing when the other users could view the user's
      modification.

An sample usage of the system is Repair From Chair. A repairer needs the ability
to modify a subset of the owner's file system, can only access the
files that the owner allows him to access, and notify the owner of the
modifications only when the repair has finished his work.

Another example is the sharing between co-workers. Alice and Bob works on a
project. Bob wants to view some code and experiment data from Alice, but is not allowed
to access other files from Alice. Bob could modify some code and run experiment
on his own, and submit those to Alice when it is mature. Bob can also rollback
to see Alice's previous versions of the code.

A Version Control System (VCS) like Git has some of the functionalities. However
it lacks the ability to restrict the ability of a user to viewing and modifying
only a subset of another user's files. One basic difficulty here is that the
ability to checkout a commit (which is important in version control) is in
conflict with the ability to restrict the permissions to only access a part of
the repository. The reason is that in order to checkout a commit, a user
needs to access some global information from the commit, i.e. the directory
tree in order to find the place of the subset of files the user wants to access.

A good design of VCS could reduce the amount of information leaked, but could
not eliminate it. Most frequently used VCS does not even consider this
problem. The reason is that VCS is often designed for co-workers to share their
work, in which case the co-workers could trust each other and make no
restrictions for accessing and modifying files in a repository.

Another problem in VCS is that most VCS does not provide the ability to checkout
and modify a subset of a repository: the user must copy everything from the
repository. The reason is that VCS is designed to maintain a project (which is
small compared to the whole file system), and the user needs everything in a
repository when the user needs to checkout it since the repository is an
integral part. (For example, if a repository is a software project, it doesn't
make sense for a user to checkout only a part of the code.) As a result, VCS
does not need to provide the ability to checkout a subset of files. However,
when we apply the VCS to the whole file system, the problem arises. For example,
when a user needs to checkout "fvm" directory, there is absolutely no need to
checkout everything from "My Photo" directory.

We propose FVM, which inherits the idea of VCS, and builds some own techniques,
   including: [from outline bullets]
    - FVM uses partial checkout and partial commit.
        # A partial checkout is the behavior to checkout a subset of files in a
          repository to a work directory. All the other files remain the same.
        # A partial commit is the behavior to commit a subset of files in a work
          directory to a repository. All the other files will remain the same as
          the last commit in the repository.
    - FVM uses partial backtrace mode to manage rollback
        # "git checkout && git branch"
        # Checkout specified commit for some user-specified files.
        # FVM stops making automatic commit for those files. The files in
          the repository will remain the same as the last commit before the backtrace mode.
        # FVM makes commit of those files into a new-generated branch.
        # FVM allows the user to merge the new-generated branches with the old
          one when the user wants to. The user could also choose to abandon the
          modifications.
    - FVM uses packages to manage the record that which files are being shared.
    - FVM uses FVM Daemon to solve the permission problem during sharing.
        # The FVM Daemon resides on the server side, which has permissions to
          all users.
        # FVM Daemon applies partial checkout and partial commit.

FVM has the following challenges. [TODO: copy challenges from outline-bullets.txt]

TODO: Summarize evaluation part.



2. Data Model

2.1 Repository and Workdir

A *repository* is a database which stores files and directories of a file
system. The machine containing a repository is called a *server*.

A *workdir*, or work directory, is a directory in a file system which is used to
contain a subset of files from a repository, and allows the user to view and
modify. (A user cannot view and modify files from a repository directly.) The
machine containing a workdir is called a *client*. The client and the server
could be the same machine.

An FVM Daemon is running on the server. When the client wants to access a subset
of files in a repository and put them in a workdir, the client sends a request
to the FVM Daemon, and the FVM Daemon performs a related action. The details are
in following subsections.

gv/workdir.pdf shows the relationship between repository and workdir.

gv/server.pdf shows the relationship between server and client.



2.2 Commitment

A commit is a snapshot of files. Each directory is represented by a tree and
each file is represented by a blob.

A commit can have a parent commit which is created before the
commit. A repository is a directed acyclic graph (DAG).

A branch is a reference to a commit (the branch head).

These are basically git data model.



2.3 Partial Checkout and Commit

In FVM, a user can checkout only a subset of files in a repository. This kind of
action is called "partial checkout". Similarly, the action that only commits a
subset of files is called "partial commit". "gv/partial.pdf" shows how the two
actions work.



2.4 Branch Mode

Branch mode serves as a combination of branching and checkout old commit.
The command format is like "backtrace relative_path branch commit_id". The commands
does the following things"

(1) Performs a partial checkout for relative_path and commit_id
(2) In the future, when FVM needs to make a commit, it makes a partial
commit for relative_path to branch, and makes a partial commit for files
not in relative_path to "master" branch. gv/backtrace.pdf shows how it works.

When the user does not need the branch mode, he can merge the branch to
"master" branch. FVM provides three options for the merge: abandon the changes;
overwrite the master branch with the changes, or performs a three-way merge
(need user's action). In the future FVM will not make a partial commit for
the relative path any more.

The most important usage for branch mode is to "hide" changes. When a user
uses branch mode, the changes of files in relative_path go to a specified
branch, which is not explicitly visible by other users. Only the user's local
machine explicitly sees those changes, until the user merge the branch to
"master" branch. So branch mode could also be called "local mode".

Another usage for branch mode is to "separate" files. For example, a user can
let his OS configuration files to be always in branch mode. When the OS
configuration is corrupted due to mal-function, a inconsistent update or virus,
the user can checkout previous commit for the OS configuration files without
affecting all the other files.



3. Motivating Scenarios

Unlike Git, Mercurial and other distributed revision control systems, FVM cannot
run on the client side independently. Also there shall be a underlying shared
file system for the users to share work directories. So the setting for all the
samples are: every user in the system are on a company/research institute
network file system (say it is NFS).

(1) The owner of a repository needs to restrict the ability of a new user to
access histories of a repository
[Mechanism: Access Control List.]

    * A is a manager of a commercial software. B is a new employee to the company.
    A wants B to work on user interface design, but does not want B to access old
    version when B has not joined the group.

    * A is a project owner. B is a visitor. A wants B to view the current state
    of the project, but does not allow B to see the history.

(2) The owner of a repository needs to restrict the ability of a user to only a
subset of files.
[Mechanism: Partial Checkout/Commit, and Access Control Information.]

    * A is a computer owner, and B is a repairer. A wants B to access some
    system files and their previous versions in order for B to repair it (B may
    need to convert some files to their older versions to fix the problem), but
    B is not allowed to see A's private files (e.g. private photos).

(3) The owner of a repository needs to separately record versions for different
files, so that one day he can rollback a subset of files without affecting the
other files.
[Mechanism: Branch Mode]

[HW: git submodule can do similar things. However the user can not freely move
file between submodules and main repository because they are managed in
different repositories. And the "submodule" has to be a certain sub-directory in
the repository, instead of any possible combination in \sys. Partial
replication in VESTA is similar to git submodule.

Revision control systems based on file versions (CVS, SVN, etc.) could checkout
particular files, but there is no method to group them as a "branch" in \sys, or
a "submodule" in git.]

    * A is a computer owner using Windows as a desktop OS. One day he can not
    boot his OS any more after getting a "blue screen" message. He wishes to
    convert the status of his C:\ partition to a stable point. However he found
    that he has a lot of data and software configurations in
    C:\Documents and Settings. If he converts everything back, he will lose all
    of them. If \sys records all Windows core files in the "windows" branch in
    branch mode, A can convert everything in that branch to a previous stable
    commit, without affecting the user data.

(4) One user of a repository may want different part of the workdir go into
different branches.
[Mechanism: Branch Mode]
[HW: (3) might be a part of (4). (3) says that the user needs to make a branch
in order to do a partial checkout. The example of (4) is that the user needs to
make a branch because the needs a normal git branch. (In the paper deadline
sample, the reason to make a branch is to reduce the amount of the attention of
certain people (i.e. the professor) by making unrelated changes (i.e. experiment
code) not to be directedly viewed by the person.)]

    * A is a graduate student in a research project close to a paper deadline.
    He has 2 major works: (1) writing the paper; (2) running experiments. The
    update for the 2 works go into different branches. For example, all paper
    updates go into "master" branch and all experiment updates go into
    "experiment" branch. Using git he has to create 2 work dirs: one for the
    paper and one for the experiment, otherwise he has to do "git checkout" very
    frequently, which is not an efficient thing. When using \sys he can specify
    that every file in "code/" in branch mode for the "experiment" branch, and
    he only needs to maintain a single workdir for the project, which is easy to
    manage.

(5) One user may need to focus on the modification of a subset of a repository.
[Mechanism: Partial checkout and partial commit]

    * Same setting for the research project sample in (4). A co-author of the
    paper (e.g. the advisor of the student) only focuses on the writing of the
    paper, he does not care about real implementation. Then he can partial
    checkout only the files in "doc/". He will not access and will not be
    interrupted by the files in "code/" which he does not concern.



##### Obsoleted Samples Below #####
(1) A is a manager of a commercial software. B is a new employee to the company.
A wants B to work on user interface design, but does not want B to access old
version when B has not joined the group, or code that B is not working on (e.g.
a commercial secret).

(2) A is a professor, B C and D are 3 students. A assigns an assignment to the
students. Each student could only see his/her own piece of work, but A needs to
see all of the students' work. A also wants to see intermediate points to see if
the students are working well.

    [MW: above needs a bit of help. The current model for
    professor/student collaboration is that the student types the
    equivalent of "handin labFOO", which causes the system to copy the
    student's directory to the professor. Why do we need everyone
    working in the same repository? I believe that there probably are
    good motivating examples, but the above doesn't quite get there.]
 
(3) A is a computer owner, and B works for a repair shop. A wants B to fix a
software problem. B may install new software, checkout previous version, or use
different configuration to fix the problem, but is not allowed to visit A's
private data (e.g. personal pictures).

    [MW: interesting use of RFaC scenario. I'm not sure if readers will
    buy this, since they may observe that there are far simpler ways to
    protect one's private data, such as encrypting the directories that
    contain the private data.]

