1. Motivation

Here are the questions we wish to answer in eval section:

(1) What is the performance of \sys, compared to regular revision control
systems?

(2) How can \sys solve the problems that regular revision control systems could
not solve?

(3) Any other questions interested TBD.




2. Performance experiments

2.1 High Level Ideas

We compare the following aspects for \sys and regular version control systems
(VCS)
(SVN, GIT, Mercurial, etc.):
Time cost,
Disc space cost,
CPU/Memory cost,
Network cost

We perform the following actions for a repository created by making a single
commitment of a fixed set of files to an empty repository:
make a commitment of a file,
checkout a file
enter branch mode (for regular systems, create a branch)

To sum up, the experiment set is:
{\sys, git, svn, mercurial, ...} * {commit, checkout, branch}

In each experiment, we collect {time-cost, space-cost, cpu/memory-cost,
    network-cost}

[MW: maybe call the above microbenchmarks?]

2.2 Two-user scenario

In this scenario, we assume two users are using the same network file system.
There is 1 server machine and 2 client machines. They all belong to the same
data center.

#1 Time cost

When a user uses a VCS, he first needs to perform an "initial checkout", and
then performs regular checkout and commit. The "initial checkout" needs to
checkout the whole directory tree while the operations afterwards only need to
work on the differences. So the initial checkout should be slower than the other
operations. We will evaluate them separately.

For a repository with fixed size $s$, do the following for each VCS:

(1) performs an initial checkout, record the time $t_1$
(2) performs a normal checkout, record the time $t_2$
(3) performs a normal commit, record the time $t_3$

Plot $t_1$, $t_2$, and $t_3$ v.s $s$.

During the previous experiments, we also record the CPU and memory cost for the
VCS program. We will display them in a table.

#2 Space cost

We continously add files into workdir, and make a commit after each file. Plot
the repository size $r$ over the workdir size $w$.

[MW: good.]

#4 Network cost

We record the amount of data transferred through the network, and the time cost
through the network. We will run the experiments for multiple times and get the
average and variation of the data.

[MW: why/how is average RTT and jitter relevant? Aren't those metrics
evaluating somethign at a different (lower) level of abstraction, namely
the network? Maybe I'm misunderstanding.]

[MW: above is good, as it investigates network costs. You could call
this "Network cost", I think.]
[HW: updated.]

