[notes/design.txt and notes/design_v2.txt has some details.]
[Section arrangement (vary during actual writing):
S1 intro: 1.5 pages
S2 motiviation: 1 page
S3-S5 design: 5-6 pages
S6 eval: 2-3 pages
S7-S9 other stuff: 1-2 pages
Reference 0.5 - 1 pages]


[MW: This content looks mostly right (though a bit too detailed in S1; I
don't think everything that's proposed for S1 will fit in S1). I'd
suggest now organizing the bullets in a proposed paragraph order.  What
should the first paragraph say? What should the second paragraph say?
Etc.]

S1 Intro
[Refer to section 1 in notes/design_v2.txt.]

- Context
    [HW: Mention it in an appropriate position.]

    * Single machine or local network

[HW: Problems, review of old VCS, and motivation samples could be combined
together.]
- Problem [This part may be mixed with motivation samples. it talks about
    the problem which the paper addresses.]
    [HW: Question. Shall we mention that we want to perform version control on
    the whole file system or no?]
    [MW: I think it might make sense to mention "the whole file system"
     as an important use case.]

    [MW: the above says "Problem." What exactly is the problem? I think
    it might be better to call this "desired properties" or "desired
    functions" or something like that. But this might be a bit too early
    in the paper to be going into this much detail. What paragraph order
    do you propose?]

    * version control (a.k.a revision control)
        + create checkpoints (a.k.a "commit" in git or "revision" in svn)
        + rollback to previous checkpoints (a.k.a "checkout" in git or svn)

    * branching
        + create an indepdent way (a.k.a "branch" in git or svn) for development
        + each branch may contain different subset of files (git has no such
                functionality)
        + rollback of the files in one branch does not affect those in another
                branch.
        + The user can merge branches or move file from one branch to another.

    * sharing and access control
        + Different users can share one repository
        + A user's ability can be restricted to visit a subset of files, and a
            subset of the commit history.

- Motivation Samples. [This part chooses 1-2 problems that popular version
    control systems cannot solve, which attracts the readers' interest. It
    explains how popular version control could not solve those problems.]
    * Case 1: Case 1 in S3 of notes/design_v2.txt
    * Case 2: Case 4 in S3 of notes/design_v2.txt
    [HW: Case 2 may be omitted.]

- Old version control systems. [a.k.a Related works. This part explains why
    popular version control systems cannot solve the problems above. ]
    [See related-notes.txt]
    * CVS and SVN
    * Git and Mercurial
    * Vesta

- Approach. [This part talks about basic ideas of \sys.]
    * server-client model
    [HW: Will readers think this as a regression for version control techniques?
    We may need to prove that access control is not possible in fully
    distributed model.]
    [HW: Perhaps when people need strong access control they do not need fully
    distributed model. Because the most important benefit for distributed model
    is that it allows the user to have multiple copies of a repository and work
    on a local machine. However this is not safe if the owner of a repository
    wants to set access restrictions.]
    * repository and workdir

    [MW: it's not obvious to me that the distributed model and access
    control are in fundamental conflict. are you sure that they are?]

- Mechanisms [This part talks about basic mechanisms of \sys.]
    [HW: shall this be merged with the previous part?]
    [MW: probably should merge it, yes. In the intro, you want a maximum
    of three paragraphs that cover the design.]
    * partial checkout and partial commit
        - access control list
    * branch mode (a.k.a backtrace mode in some documentation)

- Challenges. [This part talks about challenges of \sys.]
    [For details see S3 in notes/outline-document.txt]
    * tradeoff between version control and access control (S3.0 and S3.3)
    * definition and achievement of rollback (S3.2)
    * tradeoff between cost of record and the ability to rollback (S3.1)
    [MW: the flow is such that it might be awkward/unclear to end with
    Challenges. You might be better off describing the challenges first
    and then how you respond to them. This is the kind of thing that
    requires a few revisions and iterations.]

- Implementation [This part summarizes important implementation details.]
    * FVM Daemon
    [MW: I don't think you need implementation details in the intro.]

- Evaluation. [This part talks about evaluation results of \sys.]
    [HW: Details TBD.]

- Positioning
    [HW: TBD]
    [MW: Not sure what this means. The entire intro is supposed to have
    done the positioning by the time the flow reaches the details of
    challenges and evaluation.]



S2 Motivation

[Scenario cases are in S3 in notes/design_v2.txt]

- An overview of the motivation

- Scenario #1: Case 1

- Scenario #2: Case 2

- Scenario #3: Case 4

- Summarize the scenarios and conclude basic \sys principles.
[Details TBD.]


S3 Architecture
[HW: S3 describes high level things, which occupies 1-2 pages. S4 describes the
data model details which consists of 2-3 pages. S5 describes how \sys works
using the data model, consists of 2-3 pages. Page estimate might change while
actual writing.]
[MW: I don't think you'll need more than a column (max 3/4 page) to
describe high-level things. 1.5 or 2 pages seems like too many.]
[HW: Design principles shall be in S2.]
[HW: I use the "architecture" way to talk about things here. Another way to
divide the section is to use S3 as "user's view of \sys", which contains some of the
content of S3.1, and merge the detail architecture with S4.]

- Summary of the whole architecture
    * Figure: notes/gv/server.dot.pdf (which needs some adjustment)
    * Summarize client-server model
    * Briefly state the functionality of each component in the architecture


S3.1 Summary of FVM Client
    * Describe what action a user could make. Write a table for all the actions.
    * Describe the functionality for each important action which can not be
      described completely in the table.
    * Mention how each action is related to the FVM Daemon, if needed.
    * Use samples if necessary.


S3.2 Summary of FVM Daemon
[HW: This subsection talks about the high level ideas. The details shall be
included in S5.]
    * Describe the purpose of FVM Daemon.
    * Describe how FVM Daemon and server client model helps solving access
      control problem.
    * Describe the functionality of FVM Daemon. Use a table if necessary.



S4 Data Model

- Summary of top level data model
    * Summarize repository and workdir relationship
    * A sample showing the relation between repository and workdir:
      notes/gv/partial.dot.pdf

- Summary of repository structure
    * Summarize the concept between commit, branch, tree and blob.
      [Details in S4.1]

    [MW: will this description sound like a recapitulation of git, or
    not? ideally, there are new concepts in this description.]

S4.1 Git data model

This subsection briefly introduces the git data model for those who are not
familiar with it.


S4.2 

    [MW: what goes here?]


S5 Details of FVM Daemon

- Summary of what FVM daemon does. [This might have been done somewhere in S3.]



S6 Implementation

Talks about implementation details that the readers might be interested. TBD
after S3 and S4.

[More details TBD.]

S6 Evaluation
[For details see eval-plan.txt]

TBD

S7 Related work
[For details see related-notes.txt]

TBD

S8 Discussions
TBD

S9 Conclusion
TBD

